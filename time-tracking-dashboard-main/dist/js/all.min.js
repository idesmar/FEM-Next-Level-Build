const user=document.querySelector(".profile-header-name").innerText,reports=document.querySelectorAll(".report"),cards=document.querySelectorAll(".card");async function getUserData(e){const t=await fetch("https://my-json-server.typicode.com/idesmar/practiceAPI/db"),r=await t.json();return await r[e]}const defaultReportRequest=reports.forEach((e=>{e.classList.contains("selected")&&initializeRequest(e)})),dynamicReportRequest=reports.forEach((e=>{e.addEventListener("click",(t=>{let r=t.target;resetSelected(),r&&(e.classList.add("selected"),initializeRequest(e))}))}));function resetSelected(){reports.forEach((e=>e.classList.remove("selected")))}function initializeRequest(e){getUserData(user).then((t=>{populateCards(t,e=e.innerText.toLowerCase())})).catch((e=>{setTimeout((()=>{alert(e)}),2e3)}))}function populateCards(e,t){cards.forEach((r=>{let n=r.firstElementChild.innerText,o=e.find((e=>e.title===n)).timeframes[t];r.lastElementChild.innerHTML=`\n    <li class='current'>${o.current} hrs</li>\n    <li class='previous'>${o.previous} hrs</li>\n    `}))}let dragged,sourceContainer;const dragstartHandler=e=>{dragged=e.target,sourceContainer=e.target.parentNode,e.dataTransfer.effectAllowed="move"},dragoverHandler=e=>{e.preventDefault(),e.dataTransfer.dropEffect="move"},toggleDropZone=e=>{let t=e.target;t.classList.toggle("drop-zone"),t.previousElementSibling.classList.toggle("drop-zone-set")},dropHandler=e=>{e.stopPropagation&&e.stopPropagation(),e.preventDefault(),toggleDropZone(e);let t=e.target;t!==dragged&&(t.parentNode.appendChild(dragged),t.parentNode.removeChild(t),sourceContainer.appendChild(t))},setCardsToDraggableAndSetDNDEvents=cards.forEach((e=>{e.setAttribute("draggable",!0),e.addEventListener("dragstart",dragstartHandler),e.addEventListener("dragover",dragoverHandler),e.addEventListener("dragenter",toggleDropZone),e.addEventListener("dragleave",toggleDropZone),e.addEventListener("drop",dropHandler)})),cardOptions=document.querySelectorAll(".ellipsis"),dashSegments=document.querySelectorAll(".dash-seg");let optionEl;const resetOptionElements=()=>{dashSegments.forEach((e=>{e.contains(optionEl)&&(optionEl.classList.add("close-anim"),optionEl.addEventListener("animationend",(e=>{e.target.parentNode.removeChild(e.target)})))}))},addOptionElement=e=>{optionEl=document.createElement("div"),optionEl.className="card-option",optionEl.innerHTML='\n\t\t\t<svg class="close-icon"\n\t\t\t\twidth="24" height="24" viewBox="0 0 24 24">\n\t\t\t\t<path d="M0 0h24v24H0z" fill="none"/>\n\t\t\t\t<path d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z" fill="#FFFADE" />\n\t\t\t</svg>\n\t\t\t<ul class="option-list">\n\t\t\t\t<li>Change format</li>\n\t\t\t\t<li>Copy report</li>\n\t\t\t\t<li>Copy full report</li>\n\t\t\t\t<li>Sort reports</li>\n\t\t\t\t<li>Change banner color</li>\n\t\t\t</ul>\n\t\t\t',e.target.parentNode.appendChild(optionEl),optionEl.firstElementChild.addEventListener("click",resetOptionElements,{once:!0})};cardOptions.forEach((e=>{e.addEventListener("click",(e=>{resetOptionElements(),addOptionElement(e)}))}));